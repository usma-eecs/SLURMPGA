cull:
  concurrency: 10
  enabled: true
  every: 600
  maxAge: 0
  removeNamedServers: false
  timeout: 3600
  users: false
custom: {}
debug:
  enabled: false
global:
  systemDefaultRegistry: ''
hub:
  activeServerLimit: null
  allowNamedServers: false
  annotations: {}
  args: []
  authenticatePrometheus: null
  baseUrl: /
  command: []
  concurrentSpawnLimit: 64
  config:
    JupyterHub:
      admin_access: true
      authenticator_class: ldapauthenticator.LDAPAuthenticator
      template_vars:
        announcement_login: Please log in with EECSNet credentials (first.last).
    Authenticator:
      admin_users:
        - Bryan Jonas
    LDAPAuthenticator:
      bind_dn_template:
        - 'cn={username},ou=Faculty,dc=eecs,dc=net'
        - 'cn={username},ou=2024,ou=Cadets,dc=eecs,dc=net'
        - 'cn={username},ou=2023,ou=Cadets,dc=eecs,dc=net'
        - 'cn={username},ou=2022,ou=Cadets,dc=eecs,dc=net'
        - 'cn={username},ou=2021,ou=Cadets,dc=eecs,dc=net'
      lookup_dn: true
      lookup_dn_search_filter: '({login_attr}={login})'
      lookup_dn_search_password: PASSWORD!!!!
      lookup_dn_search_user: bryan.jonas@eecs.net
      lookup_dn_user_dn_attribute: cn
      server_address: dc01.eecs.net
      user_attribute: sAMAccountName
      user_search_base: 'dc=eecs,dc=net'
  consecutiveFailureLimit: 5
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsGroup: 1000
    runAsUser: 1000
  cookieSecret: null
  db:
    password: null
    pvc:
      accessModes:
        - ReadWriteOnce
      annotations: {}
      selector: {}
      storage: 1Gi
      storageClassName: null
      subPath: null
    type: sqlite-pvc
    upgrade: null
    url: null
  deploymentStrategy:
    type: Recreate
  existingSecret: null
  extraConfig: {}
  extraConfigMap: {}
  extraContainers: []
  extraEnv: {}
  extraVolumeMounts: []
  extraVolumes: []
  fsGid: 1000
  image:
    name: jupyterhub/k8s-hub
    pullPolicy: ''
    pullSecrets: []
    tag: 0.11.1
  initContainers: []
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 30
    initialDelaySeconds: 300
    periodSeconds: 10
    timeoutSeconds: 3
  namedServerLimitPerUser: null
  networkPolicy:
    allowedIngressPorts: []
    egress:
      - to:
          - ipBlock:
              cidr: 0.0.0.0/0
    enabled: true
    ingress: []
    interNamespaceAccessLabels: ignore
  nodeSelector:
    VM: 'true'
  pdb:
    enabled: false
    minAvailable: 1
  publicURL: null
  readinessProbe:
    enabled: true
    failureThreshold: 1000
    initialDelaySeconds: 0
    periodSeconds: 2
    timeoutSeconds: 1
  redirectToServer: null
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
  service:
    annotations: {}
    loadBalancerIP: null
    ports:
      nodePort: null
    type: ClusterIP
  services: {}
  shutdownOnLogout: null
  templatePaths: []
  templateVars: {}
  tolerations: []
imagePullSecret:
  automaticReferenceInjection: true
  create: false
  email: ''
  password: ''
  registry: ''
  username: ''
imagePullSecrets: []
ingress:
  annotations: {}
  enabled: false
  hosts: []
  pathSuffix: ''
  tls: []
prePuller:
  annotations: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsGroup: 65534
    runAsUser: 65534
  continuous:
    enabled: true
  extraImages: {}
  extraTolerations: []
  hook:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    enabled: true
    image:
      name: jupyterhub/k8s-image-awaiter
      pullPolicy: ''
      pullSecrets: []
      tag: 0.11.1
    nodeSelector:
      VM: 'true'
    podSchedulingWaitDuration: 10
    resources:
      requests:
        cpu: 0
        memory: 0
    tolerations: []
  pause:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    image:
      name: k8s.gcr.io/pause
      pullPolicy: ''
      pullSecrets: []
      tag: '3.2'
  pullProfileListImages: true
  resources:
    requests:
      cpu: 0
      memory: 0
proxy:
  annotations: {}
  chp:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    extraCommandLineFlags: []
    extraEnv: {}
    image:
      name: jupyterhub/configurable-http-proxy
      pullPolicy: ''
      pullSecrets: []
      tag: 4.2.2
    livenessProbe:
      enabled: true
      initialDelaySeconds: 60
      periodSeconds: 10
    networkPolicy:
      allowedIngressPorts:
        - http
        - https
      egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
      enabled: true
      ingress: []
      interNamespaceAccessLabels: ignore
    nodeSelector:
      VM: 'true'
    pdb:
      enabled: false
      minAvailable: 1
    readinessProbe:
      enabled: true
      failureThreshold: 1000
      initialDelaySeconds: 0
      periodSeconds: 2
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
    tolerations: []
  deploymentStrategy:
    rollingUpdate: null
    type: Recreate
  https:
    enabled: false
    hosts: []
    letsencrypt:
      acmeServer: 'https://acme-v02.api.letsencrypt.org/directory'
      contactEmail: ''
    manual:
      cert: null
      key: null
    secret:
      crt: tls.crt
      key: tls.key
      name: ''
    type: letsencrypt
  labels: {}
  secretSync:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    image:
      name: jupyterhub/k8s-secret-sync
      pullPolicy: ''
      pullSecrets: []
      tag: 0.11.1
    resources: {}
  secretToken: 435459892c1b43939ec531f3391b8ac2bd6609f11e3530d3440a8e3f2407e74b
  service:
    annotations: {}
    extraPorts: []
    labels: {}
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    nodePorts:
      http: null
      https: null
    type: ClusterIP
  traefik:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    extraDynamicConfig: {}
    extraEnv: {}
    extraPorts: []
    extraStaticConfig: {}
    extraVolumeMounts: []
    extraVolumes: []
    hsts:
      includeSubdomains: false
      maxAge: 15724800
      preload: false
    image:
      name: traefik
      pullPolicy: ''
      pullSecrets: []
      tag: v2.3.7
    networkPolicy:
      allowedIngressPorts:
        - http
        - https
      egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
      enabled: true
      ingress: []
      interNamespaceAccessLabels: ignore
    nodeSelector: {}
    pdb:
      enabled: false
      minAvailable: 1
    resources: {}
    tolerations: []
rbac:
  enabled: true
scheduling:
  corePods:
    nodeAffinity:
      matchNodePurpose: require
  podPriority:
    defaultPriority: 0
    enabled: false
    globalDefault: false
    userPlaceholderPriority: -10
  userPlaceholder:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    enabled: true
    replicas: 0
  userPods:
    nodeAffinity:
      matchNodePurpose: prefer
  userScheduler:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    enabled: true
    image:
      name: k8s.gcr.io/kube-scheduler
      pullPolicy: ''
      pullSecrets: []
      tag: v1.19.7
    logLevel: 4
    nodeSelector: {}
    pdb:
      enabled: true
      minAvailable: 1
    plugins:
      score:
        disabled:
          - name: SelectorSpread
          - name: TaintToleration
          - name: PodTopologySpread
          - name: NodeResourcesBalancedAllocation
          - name: NodeResourcesLeastAllocated
          - name: NodePreferAvoidPods
          - name: NodeAffinity
          - name: InterPodAffinity
          - name: ImageLocality
        enabled:
          - name: NodePreferAvoidPods
            weight: 161051
          - name: NodeAffinity
            weight: 14631
          - name: InterPodAffinity
            weight: 1331
          - name: NodeResourcesMostAllocated
            weight: 121
          - name: ImageLocality
            weight: 11
    replicas: 2
    resources:
      requests:
        cpu: 50m
        memory: 256Mi
    tolerations: []
singleuser:
  cloudMetadata:
    blockWithIptables: true
    ip: 169.254.169.254
  cmd: jupyterhub-singleuser
  cpu:
    guarantee: null
    limit: null
  defaultUrl: /lab
  events: true
  extraAnnotations: {}
  extraContainers: []
  extraEnv: {}
  extraLabels:
    hub.jupyter.org/network-access-hub: 'true'
  extraNodeAffinity:
    preferred: []
    required: []
  extraPodAffinity:
    preferred: []
    required: []
  extraPodAntiAffinity:
    preferred: []
    required: []
  extraPodConfig: {}
  extraResource:
    guarantees: {}
    limits: {}
  extraTolerations: []
  fsGid: 100
  image:
    name: jupyter/minimal-notebook
    pullPolicy: ''
    pullSecrets: []
    tag: 3395de4db93a
  initContainers: []
  lifecycleHooks: {}
  memory:
    guarantee: 1G
    limit: null
  networkPolicy:
    allowedIngressPorts: []
    egress:
      - to:
          - ipBlock:
              cidr: 0.0.0.0/0
              except:
                - 169.254.169.254/32
    enabled: true
    ingress: []
    interNamespaceAccessLabels: ignore
  networkTools:
    image:
      name: jupyterhub/k8s-network-tools
      pullPolicy: ''
      pullSecrets: []
      tag: 0.11.1
  nodeSelector: {}
  podNameTemplate: null
  profileList:
    - default: true
      description: 'To avoid too much bells and whistles: Python.'
      display_name: Minimal environment
    - description: 'If you want the additional bells and whistles: Python, R, and Julia.'
      display_name: Datascience environment
      kubespawner_override:
        image: 'jupyter/datascience-notebook:3395de4db93a'
    - description: CUDA Environment
      display_name: Container built with CUDA support.
      kubespawner_override:
        extra_resource_limits:
          deepomatic.com/shared-gpu: '1'
        image: 'cdasdsp/k8s-notebook:1'
  serviceAccountName: null
  startTimeout: 300
  storage:
    capacity: 5Gi
    dynamic:
      pvcNameTemplate: 'claim-{username}{servername}'
      storageAccessModes:
        - ReadWriteOnce
      storageClass: null
      volumeNameTemplate: 'volume-{username}{servername}'
    extraLabels: {}
    extraVolumeMounts: []
    extraVolumes: []
    homeMountPath: /home/jovyan
    static:
      pvcName: null
      subPath: '{username}'
    type: dynamic
  uid: 1000
